---
- block:
    - name: Install ipmitool
      yum: name=ipmitool-{{ provisioning_ipmitool_version }} state=present
      delegate_to: 127.0.0.1
      run_once: true
    
    - name: ensure pxelinux directory is created
      file: path={{ provisioning_pxe_server_pxelinux_folder }} state=directory
      delegate_to: "{{ provisioning_pxe_server }}"
      run_once: true

    - name: Create pxe boot config
      template: src=pxeboot.j2 dest={{ provisioning_pxe_server_pxelinux_folder }}/01-{{ (provisioning_force_nic1 == true) | ternary(nic1_mac_address, nic2_mac_address) | lower | replace(":","-") }} mode=0755
      delegate_to: "{{ provisioning_pxe_server }}"
    
    - name: Create kickstart config
      template: >
        src={{ provisioning_distro_name }}-{{ provisioning_distro_version }}-{{ provisioning_distro_cpu_model }}.j2 
        dest={{ provisioning_pxe_server_root_folder }}/{{ provisioning_distro_name }}-{{ provisioning_distro_version }}-{{ provisioning_distro_cpu_model }}-{{ inventory_hostname }}.cfg
        mode=0755
      delegate_to: "{{ provisioning_pxe_server }}"
    
    - name: Register server power status
      shell: ipmitool -I lanplus -H {{ out_of_band_management_ip }} -p {{ out_of_band_management_port }} -U {{ out_of_band_management_user }} -P {{ out_of_band_management_password }} power status
      changed_when: false
      register: power_status
      delegate_to: 127.0.0.1
    
    - name: Reset server
      shell: ipmitool -I lanplus -H {{ out_of_band_management_ip }} -p {{ out_of_band_management_port }} -U {{ out_of_band_management_user }} -P {{ out_of_band_management_password }} power reset
      delegate_to: 127.0.0.1
      when: power_status.stdout.find('on') != -1
      register: power_reset
      
    - name: Power on server
      shell: ipmitool -I lanplus -H {{ out_of_band_management_ip }} -p {{ out_of_band_management_port }} -U {{ out_of_band_management_user }} -P {{ out_of_band_management_password }} power on
      delegate_to: 127.0.0.1
      when: power_status.stdout.find('off') != -1
      register: power_on
    
    - name: Pause 30s before changing boot order
      pause: seconds=30
      when: (power_reset is defined and power_reset.changed) or (power_on is defined and power_on.changed)

    # TODO:
    # Probar en c2100: "ipmitool -I lanplus -H <IPMI_host/IP add> -U <username> chassis bootparam set bootflag force_pxe"
    - name: Force PXE on next boot only (one more time to be sure)
      shell: ipmitool -I lanplus -H {{ out_of_band_management_ip }} -p {{ out_of_band_management_port }} -U {{ out_of_band_management_user }} -P {{ out_of_band_management_password }} chassis bootdev pxe
      delegate_to: 127.0.0.1
      
    - name: Wait_for_server (20 min)
      wait_for: host={{ hostvars[inventory_hostname].ansible_host | default(inventory_hostname) }} port={{ hostvars[inventory_hostname].ansible_port | default(22) }} state=started delay=240 timeout=2400
      delegate_to: 127.0.0.1

  always:
    - name: Remove kickstart config (avoid errors on decommissioned servers)
      file: name=dest={{ provisioning_pxe_server_root_folder }}/{{ provisioning_distro_name }}-{{ provisioning_distro_version }}-{{ provisioning_distro_cpu_model }}-{{ inventory_hostname }}.cfg state=absent
      delegate_to: "{{ provisioning_pxe_server }}"
    
    - name: Remove pxe boot config (avoid errors on decommissioned servers)
      file: name={{ provisioning_pxe_server_pxelinux_folder }}/01-{{ (provisioning_force_nic1 == true) | ternary(nic1_mac_address, nic2_mac_address) | lower | replace(":","-") }} state=absent
      delegate_to: "{{ provisioning_pxe_server }}"
